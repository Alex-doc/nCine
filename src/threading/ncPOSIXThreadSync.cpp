#include "ncThreadSync.h"
#include "ncServiceLocator.h"

///////////////////////////////////////////////////////////
// ncMutex CLASS
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// CONSTRUCTORS and DESTRUCTOR
///////////////////////////////////////////////////////////

ncMutex::ncMutex()
{
	pthread_mutex_init(&mutex_, NULL);
}

ncMutex::~ncMutex()
{
	pthread_mutex_destroy(&mutex_);
}

///////////////////////////////////////////////////////////
// PUBLIC FUNCTIONS
///////////////////////////////////////////////////////////

void ncMutex::lock()
{
	pthread_mutex_lock(&mutex_);
}

void ncMutex::unlock()
{
	pthread_mutex_unlock(&mutex_);
}

int ncMutex::tryLock()
{
	return pthread_mutex_trylock(&mutex_);
}


///////////////////////////////////////////////////////////
// ncCondVariable CLASS
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// CONSTRUCTORS and DESTRUCTOR
///////////////////////////////////////////////////////////

ncCondVariable::ncCondVariable()
{
	pthread_cond_init(&cond_, NULL);
}

ncCondVariable::~ncCondVariable()
{
	pthread_cond_destroy(&cond_);
}

///////////////////////////////////////////////////////////
// PUBLIC FUNCTIONS
///////////////////////////////////////////////////////////

void ncCondVariable::wait(ncMutex &mutex)
{
	pthread_cond_wait(&cond_, &(mutex.mutex_));
}

void ncCondVariable::signal()
{
	pthread_cond_signal(&cond_);
}

void ncCondVariable::broadcast()
{
	pthread_cond_broadcast(&cond_);
}


///////////////////////////////////////////////////////////
// ncRWLock CLASS
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// CONSTRUCTORS and DESTRUCTOR
///////////////////////////////////////////////////////////


#if !defined(_WIN32) && !defined(__WIN32__) && !defined(__WINDOWS__)

ncRWLock::ncRWLock()
{
	pthread_rwlock_init(&rwlock_, NULL);
}

ncRWLock::~ncRWLock()
{
	pthread_rwlock_destroy(&rwlock_);
}

#endif

///////////////////////////////////////////////////////////
// ncBarrier CLASS
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// CONSTRUCTORS and DESTRUCTOR
///////////////////////////////////////////////////////////

#if !defined (__ANDROID__) && !defined(__APPLE__)

/// Creates a barrier for the specified amount of waiting threads
ncBarrier::ncBarrier(unsigned int count)
{
	pthread_barrier_init(&barrier_, NULL, count);
}

ncBarrier::~ncBarrier()
{
	pthread_barrier_destroy(&barrier_);
}

#endif
