cmake_minimum_required(VERSION 3.1)
project(nCine)

# On Linux FindOpenGL prefers GLVND by default when available
if(POLICY CMP0072)
	cmake_policy(SET CMP0072 OLD)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
get_filename_component(PARENT_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)

include(ncine_options)

if(NOT IS_DIRECTORY ${NCINE_DATA_DIR})
	message(WARNING "nCine data directory not found at: ${NCINE_DATA_DIR}")
else()
	message(STATUS "nCine data directory: ${NCINE_DATA_DIR}")
endif()

include(ncine_get_version)
include(ncine_installation)

include(ProcessorCount)
ProcessorCount(NCINE_CORES)
if(NCINE_CORES EQUAL 0)
	set(NCINE_CORES 1)
endif()

find_package(Threads)
if(MSVC)
	if(NOT IS_DIRECTORY ${EXTERNAL_MSVC_DIR})
		message(FATAL_ERROR "nCine external MSVC libraries directory not found at: ${EXTERNAL_MSVC_DIR}")
	else()
		message(STATUS "nCine external MSVC libraries directory: ${EXTERNAL_MSVC_DIR}")
	endif()

	if(MSVC_C_ARCHITECTURE_ID MATCHES 64 OR MSVC_CXX_ARCHITECTURE_ID MATCHES 64)
		set(LIBDIR "${EXTERNAL_MSVC_DIR}/lib/x64")
		set(BINDIR "${EXTERNAL_MSVC_DIR}/bin/x64")
	else()
		set(LIBDIR "${EXTERNAL_MSVC_DIR}/lib/x86")
		set(BINDIR "${EXTERNAL_MSVC_DIR}/bin/x86")
	endif()

	if(EXISTS ${LIBDIR}/glew32.lib AND EXISTS ${BINDIR}/glew32.dll)
		set(GLEW_LIBRARY ${LIBDIR}/glew32.lib)
		set(GLEW_FOUND 1)
	endif()
	set(OPENGL_gl_LIBRARY opengl32.lib)
	set(OPENGL_FOUND 1)
	if(EXISTS ${LIBDIR}/glfw3dll.lib AND EXISTS ${BINDIR}/glfw3.dll)
		set(GLFW_LIBRARY ${LIBDIR}/glfw3dll.lib)
		set(GLFW_FOUND 1)
	endif()
	if(EXISTS ${LIBDIR}/SDL2.lib AND EXISTS ${LIBDIR}/SDL2main.lib AND EXISTS ${BINDIR}/SDL2.dll)
		set(SDL2_LIBRARY ${LIBDIR}/SDL2main.lib ${LIBDIR}/SDL2.lib)
		set(SDL2_FOUND 1)
	endif()
	if(EXISTS ${LIBDIR}/libpng16.lib AND EXISTS ${LIBDIR}/zlib.lib AND
	   EXISTS ${BINDIR}/libpng16.dll AND EXISTS ${BINDIR}/zlib.dll)
		set(PNG_LIBRARY ${LIBDIR}/libpng16.lib)
		set(PNG_FOUND 1)
	endif()
	if(EXISTS ${LIBDIR}/OpenAL32.lib AND EXISTS ${BINDIR}/OpenAL32.dll)
		set(OPENAL_LIBRARY ${LIBDIR}/OpenAL32.lib)
		set(OPENAL_FOUND 1)
	endif()
	if(EXISTS ${LIBDIR}/libwebp_dll.lib AND EXISTS ${BINDIR}/libwebp.dll AND EXISTS ${BINDIR}/libwebpdecoder.dll)
		set(WEBP_LIBRARY ${LIBDIR}/libwebp_dll.lib)
		set(WEBP_FOUND 1)
	endif()
	if(EXISTS ${LIBDIR}/libogg.lib AND EXISTS ${LIBDIR}/libvorbis.lib AND EXISTS ${LIBDIR}/libvorbisfile.lib AND
	   EXISTS ${BINDIR}/libogg.dll AND EXISTS ${BINDIR}/libvorbis.dll AND EXISTS ${BINDIR}/libvorbisfile.dll)
		set(VORBISFILE_LIBRARY ${LIBDIR}/libogg.lib ${LIBDIR}/libvorbis.lib ${LIBDIR}/libvorbisfile.lib)
		set(VORBIS_FOUND 1)
	endif()
	if(EXISTS ${LIBDIR}/lua53.lib AND EXISTS ${BINDIR}/lua53.dll)
		set(LUA_LIBRARY ${LIBDIR}/lua53.lib)
		set(LUA_FOUND 1)
	endif()
else() # GCC and LLVM
	if(APPLE)
		set(CMAKE_FRAMEWORK_PATH "${PARENT_SOURCE_DIR}/nCine-external")
		set(CMAKE_MACOSX_RPATH ON)

		if(NOT IS_DIRECTORY ${CMAKE_FRAMEWORK_PATH})
			message(FATAL_ERROR "nCine external OS X frameworks directory not found at: ${CMAKE_FRAMEWORK_PATH}")
		else()
			message(STATUS "nCine external OS X frameworks directory: ${CMAKE_FRAMEWORK_PATH}")
		endif()
	endif()

	if(WIN32)
		find_package(GLEW REQUIRED)
	else()
		find_package(GLEW)
	endif()
	find_package(OpenGL REQUIRED)
	find_package(GLFW)
	find_package(SDL2)
	find_package(PNG)
	find_package(OpenAL)
	find_package(WebP)
	find_package(Vorbis)
	find_package(Lua)
endif()

set(WITH_IMGUI 1)
include(ncine_imgui)

# Forcing the use of SDL2
#set(GLFW_FOUND 0)

if(NOT SDL2_FOUND AND NOT GLFW_FOUND)
	message(FATAL_ERROR "Neither SDL2 nor GLFW have been found")
endif()

include(ncine_compiler_options)

set(NCINE_ROOT ${CMAKE_SOURCE_DIR})
include(ncine_headers)
include(ncine_private_headers)
include(ncine_sources)
include(ncine_extra_sources)
include(ncine_generated_sources)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
foreach(SOURCE_FILE IN LISTS HEADERS)
	source_group("Headers" FILES ${SOURCE_FILE})
endforeach()
foreach(SOURCE_FILE IN LISTS NCTL_HEADERS)
	source_group("nCTL" FILES ${SOURCE_FILE})
endforeach()
foreach(SOURCE_FILE IN LISTS PRIVATE_HEADERS)
	source_group("Private Headers" FILES ${SOURCE_FILE})
endforeach()
foreach(SOURCE_FILE IN LISTS SOURCES)
	source_group("Sources" FILES ${SOURCE_FILE})
endforeach()
foreach(SOURCE_FILE IN LISTS SHADER_FILES)
	source_group("Shaders" FILES ${SOURCE_FILE})
endforeach()
foreach(SOURCE_FILE ${GENERATED_SOURCES})
	source_group("Generated" FILES ${SOURCE_FILE})
endforeach()

if(NCINE_DYNAMIC_LIBRARY)
	add_library(ncine SHARED ${SOURCES} ${PRIVATE_HEADERS} ${HEADERS} ${NCTL_HEADERS} ${SHADER_FILES} ${GENERATED_SOURCES})
else()
	add_library(ncine STATIC ${SOURCES} ${PRIVATE_HEADERS} ${HEADERS} ${NCTL_HEADERS} ${SHADER_FILES} ${GENERATED_SOURCES})
	target_compile_definitions(ncine PUBLIC "NCINE_STATIC")
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug" AND NCINE_CODE_COVERAGE AND CODE_COVERAGE_SUPPORTED)
	set_target_properties(ncine PROPERTIES COMPILE_FLAGS "--coverage")
	set_target_properties(ncine PROPERTIES LINK_FLAGS "--coverage")
endif()

set_target_properties(ncine PROPERTIES DEBUG_POSTFIX "")
if(MSVC)
	target_include_directories(ncine PRIVATE "${EXTERNAL_MSVC_DIR}/include")
	# Suppress linker warning about templates
	target_compile_options(ncine PUBLIC "/wd4251")
else()
	if(PNG_FOUND)
		target_include_directories(ncine PRIVATE ${PNG_INCLUDE_DIR})
	endif()
	if(APPLE AND GLEW_FOUND)
		target_include_directories(ncine PRIVATE ${GLEW_INCLUDE_DIR})
	endif()
	if(LUA_FOUND)
		target_include_directories(ncine PRIVATE ${LUA_INCLUDE_DIR})
	endif()
endif()
if(WITH_IMGUI)
	target_include_directories(ncine PUBLIC ${IMGUI_SOURCE_DIR})
endif()
target_include_directories(ncine PUBLIC include PRIVATE src/include)
if(IS_DIRECTORY ${GENERATED_INCLUDE_DIR})
	target_include_directories(ncine PRIVATE ${GENERATED_INCLUDE_DIR})
endif()
if(APPLE)
	file(RELATIVE_PATH RELPATH_TO_FRAMEWORKS ${CMAKE_INSTALL_PREFIX}/${LIBRARY_INSTALL_DESTINATION} ${CMAKE_INSTALL_PREFIX}/${FRAMEWORKS_INSTALL_DESTINATION})
	set_target_properties(ncine PROPERTIES INSTALL_RPATH "@loader_path/${RELPATH_TO_FRAMEWORKS}")
endif()

if(NCINE_TESTS_DATA_DIR)
	string(LENGTH ${NCINE_TESTS_DATA_DIR} NCINE_TESTS_DATA_DIR_LENGTH)
	math(EXPR NCINE_TESTS_DATA_DIR_LENGTH "${NCINE_TESTS_DATA_DIR_LENGTH}-1")
	string(SUBSTRING ${NCINE_TESTS_DATA_DIR} ${NCINE_TESTS_DATA_DIR_LENGTH} 1 NCINE_TESTS_DATA_DIR_LAST_CHAR)
	if(NOT(NCINE_TESTS_DATA_DIR_LAST_CHAR STREQUAL "/"))
		string(CONCAT NCINE_TESTS_DATA_DIR ${NCINE_TESTS_DATA_DIR} "/")
	endif()
endif()

target_compile_definitions(ncine PRIVATE ${PRIVATE_COMPILE_DEFINITIONS})
target_link_libraries(ncine PRIVATE ${OPENGL_gl_LIBRARY} ${PRIVATE_LINK_LIBRARIES})

if(WIN32)
	if(NCINE_INSTALL_DEV_SUPPORT)
		install(TARGETS ncine RUNTIME DESTINATION ${RUNTIME_INSTALL_DESTINATION} COMPONENT libraries
			ARCHIVE DESTINATION ${ARCHIVE_INSTALL_DESTINATION} COMPONENT libraries)
	else()
		install(TARGETS ncine RUNTIME DESTINATION ${RUNTIME_INSTALL_DESTINATION} COMPONENT libraries)
	endif()
else()
	install(TARGETS ncine DESTINATION ${LIBRARY_INSTALL_DESTINATION} COMPONENT libraries)
endif()

install(FILES README.md DESTINATION ${README_INSTALL_DESTINATION} COMPONENT libraries)
if(MSVC OR APPLE)
	install(FILES LICENSE DESTINATION ${README_INSTALL_DESTINATION} COMPONENT libraries RENAME LICENSE.txt)
endif()
if(MSVC)
	install(DIRECTORY ${BINDIR}/ DESTINATION ${RUNTIME_INSTALL_DESTINATION} COMPONENT libraries)
elseif(APPLE)
	install(DIRECTORY ${CMAKE_FRAMEWORK_PATH}/ DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION} COMPONENT libraries)
endif()
if(NCINE_INSTALL_DEV_SUPPORT)
	install(FILES ${HEADERS} DESTINATION ${INCLUDE_INSTALL_DESTINATION} COMPONENT devsupport)
	install(FILES ${NCTL_HEADERS} DESTINATION ${INCLUDE_INSTALL_DESTINATION}/nctl COMPONENT devsupport)
	install(FILES ${NCINE_CONFIG_H} DESTINATION ${INCLUDE_INSTALL_DESTINATION} COMPONENT devsupport)
	install(FILES tests/main.cpp DESTINATION ${MAIN_CPP_INSTALL_DESTINATION} COMPONENT devsupport)
endif()
if(NOT NCINE_EMBED_SHADERS)
	install(DIRECTORY src/shaders/ DESTINATION ${SHADERS_INSTALL_DESTINATION} COMPONENT devsupport)
endif()

include(CMakePackageConfigHelpers)
configure_package_config_file(
	"${CMAKE_SOURCE_DIR}/cmake/nCineConfig.cmake.in"
	"${CMAKE_BINARY_DIR}/nCineConfig.cmake"
	INSTALL_DESTINATION "${NCINE_CONFIG_INSTALL_DESTINATION}"
	PATH_VARS CMAKE_INSTALL_PREFIX
	NO_CHECK_REQUIRED_COMPONENTS_MACRO)
if(NCINE_INSTALL_DEV_SUPPORT)
	install(FILES ${CMAKE_BINARY_DIR}/nCineConfig.cmake DESTINATION ${NCINE_CONFIG_INSTALL_DESTINATION} COMPONENT devsupport)
endif()

include(ncine_build_documentation)
include(ncine_build_tests)
include(ncine_build_unit_tests)
include(ncine_build_android)
