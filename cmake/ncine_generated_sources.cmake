# Has to be called after ncine_get_version.cmake

set(GENERATED_SOURCE_DIR "${CMAKE_BINARY_DIR}/generated")
set(GENERATED_INCLUDE_DIR "${GENERATED_SOURCE_DIR}/include")

if(GIT_EXECUTABLE)
	message(STATUS "Exporting git version information to C strings")

	set(VERSION_H_FILE "${GENERATED_INCLUDE_DIR}/version.h")
	set(VERSION_CPP_FILE "${GENERATED_SOURCE_DIR}/version.cpp")
	if(EXISTS ${VERSION_H_FILE})
		file(REMOVE ${VERSION_H_FILE})
	endif()
	if(EXISTS ${VERSION_CPP_FILE})
		file(REMOVE ${VERSION_CPP_FILE})
	endif()

	set(VERSION_STRUCT_NAME "VersionStrings")
	set(VERSION_STRING_NAME "Version")
	get_filename_component(VERSION_H_FILENAME ${VERSION_H_FILE} NAME)
	file(APPEND ${VERSION_H_FILE} "namespace ncine {\n\n")
	file(APPEND ${VERSION_H_FILE} "struct ${VERSION_STRUCT_NAME}\n{\n")
	file(APPEND ${VERSION_CPP_FILE} "#include \"${VERSION_H_FILENAME}\"\n\n")
	file(APPEND ${VERSION_CPP_FILE} "namespace ncine {\n\n")
	file(APPEND ${VERSION_H_FILE} "\tstatic char const * const ${VERSION_STRING_NAME};\n")
	file(APPEND ${VERSION_CPP_FILE} "char const * const ${VERSION_STRUCT_NAME}::${VERSION_STRING_NAME} = \"${NCINE_VERSION}\";\n\n")
	message(STATUS "nCine version: ${NCINE_VERSION}")
	file(APPEND ${VERSION_H_FILE} "};\n\n}\n")
	file(APPEND ${VERSION_CPP_FILE} "}\n")
	
	list(APPEND GENERATED_SOURCES ${VERSION_H_FILE})
	list(APPEND GENERATED_SOURCES ${VERSION_CPP_FILE})
	list(APPEND PRIVATE_COMPILE_DEFINITIONS "WITH_GIT_VERSION")

	set(NCINE_ANDROID_GENERATED_SOURCES "${NCINE_ANDROID_GENERATED_SOURCES} ${VERSION_CPP_FILE}")
	set(NCINE_ANDROID_GENERATED_FLAGS "${NCINE_ANDROID_GENERATED_FLAGS} -DWITH_GIT_VERSION")
	set(NCINE_ANDROID_GENERATED_INCLUDES ${GENERATED_INCLUDE_DIR})
endif()

file(GLOB SHADER_FILES "src/shaders/*.glsl")
if(NCINE_EMBED_SHADERS)
	message(STATUS "Exporting shader files to C strings")

	set(SHADERS_H_FILE "${GENERATED_INCLUDE_DIR}/shader_strings.h")
	set(SHADERS_CPP_FILE "${GENERATED_SOURCE_DIR}/shader_strings.cpp")
	if(EXISTS ${SHADERS_H_FILE})
		file(REMOVE ${SHADERS_H_FILE})
	endif()
	if(EXISTS ${SHADERS_CPP_FILE})
		file(REMOVE ${SHADERS_CPP_FILE})
	endif()

	set(SHADER_STRUCT_NAME "ShaderStrings")
	get_filename_component(SHADERS_H_FILENAME ${SHADERS_H_FILE} NAME)
	file(APPEND ${SHADERS_H_FILE} "namespace ncine {\n\n")
	file(APPEND ${SHADERS_H_FILE} "struct ${SHADER_STRUCT_NAME}\n{\n")
	file(APPEND ${SHADERS_CPP_FILE} "#include \"${SHADERS_H_FILENAME}\"\n\n")
	file(APPEND ${SHADERS_CPP_FILE} "namespace ncine {\n\n")
	foreach(SHADER_FILE ${SHADER_FILES})
		get_filename_component(SHADER_CSTRING_NAME ${SHADER_FILE} NAME_WE)
		file(STRINGS ${SHADER_FILE} SHADER_LINES)
		file(APPEND ${SHADERS_H_FILE} "\tstatic char const * const ${SHADER_CSTRING_NAME};\n")
		file(APPEND ${SHADERS_CPP_FILE} "char const * const ${SHADER_STRUCT_NAME}::${SHADER_CSTRING_NAME} = ")
		foreach(SHADER_LINE ${SHADER_LINES})
			file(APPEND ${SHADERS_CPP_FILE} "\n\"${SHADER_LINE}\\n\"")
		endforeach()
		file(APPEND ${SHADERS_CPP_FILE} ";\n\n")
	endforeach()
	file(APPEND ${SHADERS_H_FILE} "};\n\n}\n")
	file(APPEND ${SHADERS_CPP_FILE} "}\n")

	list(APPEND GENERATED_SOURCES ${SHADERS_H_FILE})
	list(APPEND GENERATED_SOURCES ${SHADERS_CPP_FILE})
	list(APPEND PRIVATE_COMPILE_DEFINITIONS "WITH_EMBEDDED_SHADERS")

	set(NCINE_ANDROID_GENERATED_SOURCES "${NCINE_ANDROID_GENERATED_SOURCES} ${SHADERS_CPP_FILE}")
	set(NCINE_ANDROID_GENERATED_FLAGS "${NCINE_ANDROID_GENERATED_FLAGS} -DWITH_EMBEDDED_SHADERS")
	set(NCINE_ANDROID_GENERATED_INCLUDES ${GENERATED_INCLUDE_DIR})

	# Don't need to add shader files to the library target if they are embedded
	set(SHADER_FILES "")
endif()
